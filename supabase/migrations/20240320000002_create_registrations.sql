-- Create registrations table
CREATE TABLE IF NOT EXISTS registrations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  session_id BIGINT NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
  session_date DATE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  UNIQUE(user_id, session_id, session_date)
);

-- Create RLS policies
ALTER TABLE registrations ENABLE ROW LEVEL SECURITY;

-- Allow users to read their own registrations
CREATE POLICY "Users can read their own registrations"
  ON registrations FOR SELECT
  USING (auth.uid() = user_id);

-- Allow users to create their own registrations
CREATE POLICY "Users can create their own registrations"
  ON registrations FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- Allow users to delete their own registrations
CREATE POLICY "Users can delete their own registrations"
  ON registrations FOR DELETE
  USING (auth.uid() = user_id);

-- Allow admins to manage all registrations
CREATE POLICY "Admins can manage all registrations"
  ON registrations FOR ALL
  USING (auth.jwt() ->> 'role' = 'admin')
  WITH CHECK (auth.jwt() ->> 'role' = 'admin');

-- Create trigger to update updated_at timestamp
CREATE TRIGGER update_registrations_updated_at
  BEFORE UPDATE ON registrations
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column(); 